//----- Variables -----------------------------------------------------------------------------------------------------

arm7.pc = 0
arm7.read_return = 0
arm9.pc = 0
arm9.read_return = 0
bg_mode = 0
calc.char = 32
calc.return = 0
calc.temp = 31
calc.temp2 = 0
core.byte_return = 0
core.condition_test = 0
core.dummy = 0
core.dummy2 = 0
core.dummy_op = 0
core.instruction_format = 0
core.little_endian = 0
core.op.dummy = 0
core.op.dummy2 = 0
core.read_return = 0
core.rotate_return = 0
core.shift_return = 0
flags.met = 0
op.opcode = 0
op.pos = 0
op.temp = 2
program.done = 1
read.return = 2147483907
read.single.return = 3
scanX = 0
scanY = 228
storage.byte = 4
tile_mode = 0


//----- Lists ---------------------------------------------------------------------------------------------------------

arm7.registers = { }
arm9.flags = { }
arm9.registers = { }


//----- Green flag events ---------------------------------------------------------------------------------------------

WhenGreenFlagClicked()
{
    Looks.Hide();
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(exit emulator)
{
    Stop(other scripts in sprite);
}

WhenBroadcastReceived(Game Boy Advance)
{
    Stop(other scripts in sprite);
    Call reset_mem;
    Event.Broadcast("reset");
}

WhenBroadcastReceived(hard_reset)
{
    Stop(other scripts in sprite);
    Call reset_mem;
    Event.Broadcast("reset");
}

WhenBroadcastReceived(Project not saving fix)
{
    List.DeleteAll(CARTRAM);
    List.DeleteAll(EWRAM);
    List.DeleteAll(IORAM);
    List.DeleteAll(IWRAM);
    List.DeleteAll(OAM);
    List.DeleteAll(PALRAM);
    List.DeleteAll(VRAM);
    List.DeleteAll(_pixels);
}

WhenBroadcastReceived(reset)
{
    Pen.Clear();
    Pen.SetPenSizeTo(2);
    List.DeleteAll(_r);
    Repeat (16)
    {
        List.Add(_r, 0);
    }
    List.ReplaceItem(_r, 16, ( + Operator.Join("0x", "07fffffc")));
    flags.z = 0;
    flags.c = 0;
    flags.n = 0;
    flags.v = 0;
    bg_mode = 0;
    program.done = 0;
    Forever
    {
        Sensing.ResetTimer();
        Call frame;
        Call render_screen;
    }
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define (string x) &(string y) (warp=true)
{
}

Define (string x) <<(string y) (warp=true)
{
    calc.return = (x * Operator.Round(10 ^((y * 0.3010299956639812))));
}

Define (string x) >>(string y) (warp=true)
{
    calc.return = floor((x / 10 ^((y * 0.3010299956639812))));
}

Define (string x) ^(string y) (warp=true)
{
    Repeat (floor(y))
    {
        calc.return = (x * x);
    }
}

Define (string x) |(string y) (warp=true)
{
}

Define frame (warp=true)
{
    scanX = 0;
    scanY = 0;
    cycles = 0;
    Repeat Until (scanY == 228)
    {
        Call step;
        tile_mode = (IORAM[4] % 16);
        bg_mode = Operator.Round((log(IORAM[3]) / 0.301029996));
        cycles += 4;
        If (cycles > 3)
        {
            cycles += -4;
            If (tile_mode < 4)
            {
                If (tile_mode < 2)
                {
                }
                Else
                {
                    If (tile_mode < 3)
                    {
                    }
                    Else
                    {
                        If ((scanX < 240) And (scanY < 160))
                        {
                            List.ReplaceItem(_pixels, (1 + (scanX + (240 * scanY))), ((256 * VRAM[(1 + (2 * (scanX + (240 * scanY))))]) + VRAM[(2 * (1 + (scanX + (240 * scanY))))]));
                        }
                    }
                }
            }
            Else
            {
                If (tile_mode < 5)
                {
                }
                Else
                {
                    If (tile_mode < 6)
                    {
                        If ((scanX < 160) And (scanY < 128))
                        {
                        }
                    }
                    Else
                    {
                    }
                }
            }
            scanX += 1;
            If (scanX == 309)
            {
                scanX = 0;
                scanY += 1;
            }
        }
    }
}

Define get_pos(string op) (warp=true)
{
    Call (op) >>(25);
    If ((calc.return % 2) == 0)
    {
        Call (op) >>(4);
        Call (_r[(1 + (op % 16))]) <<((calc.return % 256));
    }
    Else
    {
        Call (op) >>(8);
        Call ror((op % 256))((calc.return % 16));
    }
    op.pos = calc.return;
}

Define opcode(string op) (warp=true)
{
    Call (op) >>(26);
    If ((calc.return % 4) == 0)
    {
        Call (op) >>(21);
        calc.return = (calc.return % 16);
        If (calc.return > 7)
        {
            If (calc.return > 11)
            {
                If (calc.return > 13)
                {
                    If (calc.return > 14)
                    {
                    }
                    Else
                    {
                    }
                }
                Else
                {
                    If (calc.return > 12)
                    {
                        Call (op) >>(25);
                        If ((calc.return % 2) == 0)
                        {
                            calc.return = (op % 4096);
                        }
                        Else
                        {
                            Call (op) >>(8);
                            Call ror((op % 256))(((calc.return % 16) - 16));
                        }
                        op.pos = calc.return;
                        Call (op) >>(12);
                        List.ReplaceItem(_r, (1 + (calc.return % 16)), op.pos);
                    }
                    Else
                    {
                    }
                }
            }
            Else
            {
                If (calc.return > 9)
                {
                    If (calc.return > 10)
                    {
                    }
                    Else
                    {
                    }
                }
                Else
                {
                    If (calc.return > 8)
                    {
                    }
                    Else
                    {
                    }
                }
            }
        }
        Else
        {
            If (calc.return > 3)
            {
                If (calc.return > 5)
                {
                    If (calc.return > 6)
                    {
                    }
                    Else
                    {
                    }
                }
                Else
                {
                    If (calc.return > 4)
                    {
                    }
                    Else
                    {
                        Call get_pos(op);
                        Call (op) >>(16);
                        op.temp = (_r[(1 + (calc.return % 16))] + op.pos);
                        flags.c = (op.temp > "0xffffffff");
                        flags.n = 0;
                        If (flags.c == "true")
                        {
                            op.temp += ( - 0xffffffff);
                        }
                        flags.z = (op.temp == 0);
                        Call (op) >>(12);
                        List.ReplaceItem(_r, (1 + (calc.return % 16)), op.temp);
                    }
                }
            }
            Else
            {
                If (calc.return > 1)
                {
                    If (calc.return > 2)
                    {
                    }
                    Else
                    {
                        Call get_pos(op);
                        Call (op) >>(16);
                        op.temp = (_r[(1 + (calc.return % 16))] - op.pos);
                        flags.z = (op.temp == 0);
                        flags.n = 1;
                        flags.v = (op.temp < 0);
                        If (op.temp < 0)
                        {
                            op.temp += 0x100000000;
                        }
                        Call (op) >>(12);
                        List.ReplaceItem(_r, (1 + (calc.return % 16)), op.temp);
                    }
                }
                Else
                {
                    If (calc.return > 0)
                    {
                    }
                    Else
                    {
                    }
                }
            }
        }
    }
    Else
    {
        If ((calc.return % 4) == 1)
        {
            Call (op) >>(25);
            If ((calc.return % 2) == 0)
            {
                op.pos = (op % 4096);
            }
            Else
            {
                Call (calc.return) >>(8);
                Call ror((op % 256))(((calc.return % 16) - 16));
                op.pos = calc.return;
            }
            Call (op) >>(12);
            op.temp = (1 + (calc.return % 16));
            Call (op) >>(20);
            If ((calc.return % 2) == 0)
            {
                Call (op) >>(16);
                Call write((_r[(1 + (calc.return % 16))] + op.pos))(_r[op.temp])(4);
            }
            Else
            {
                Call (op) >>(16);
                Call read((_r[(1 + (calc.return % 16))] + op.pos))(4);
                List.ReplaceItem(_r, op.temp, read.return);
            }
        }
        Else
        {
        }
    }
}

Define read(string addr)(string length) (warp=true)
{
    read.return = 0;
    storage.byte = 0;
    Repeat (length)
    {
        Call single_read((addr + storage.byte));
        read.return = ((256 * read.return) + read.single.return);
        storage.byte += 1;
    }
}

Define render_screen (warp=true)
{
    pixel = 1;
    Motion.SetY(160);
    Repeat (160)
    {
        Motion.SetX(-240);
        Pen.Down();
        Repeat (240)
        {
            Pen.SetPenColorToColor(((524288 * (_pixels[pixel] % 32)) + ((2048 * (floor((_pixels[pixel] / 32)) % 32)) + (8 * (floor((_pixels[pixel] / 1024)) % 32)))));
            pixel += 1;
            Motion.ChangeXBy(2);
        }
        Pen.Clear();
        Motion.ChangeYBy(-2);
    }
}

Define reset_mem (warp=true)
{
    List.DeleteAll(CARTRAM);
    List.DeleteAll(EWRAM);
    List.DeleteAll(IORAM);
    List.DeleteAll(IWRAM);
    List.DeleteAll(OAM);
    List.DeleteAll(PALRAM);
    List.DeleteAll(VRAM);
    List.DeleteAll(_pixels);
    Repeat (Operator.Join("0x", 400))
    {
        List.Add(IORAM, 0);
        List.Add(PALRAM, 0);
        List.Add(OAM, 0);
    }
    Repeat (Operator.Join("0x", 4000))
    {
        List.Add(EWRAM, 0);
    }
    Repeat (Operator.Join("0x", 8000))
    {
        List.Add(IWRAM, 0);
    }
    Repeat (Operator.Join("0x", 18000))
    {
        List.Add(VRAM, 0);
    }
    Repeat ((240 * 160))
    {
        List.Add(_pixels, 0);
    }
}

Define ror(string x)(string y) (warp=true)
{
    calc.temp = 0;
    calc.char = 0;
    Repeat (32)
    {
        Call (x) >>((((calc.char + 32) - (32 - (2 * y))) % 32));
        calc.temp2 = calc.return;
        Call (1) <<(calc.char);
        calc.temp += (calc.return * (calc.temp2 % 2));
        calc.char += 1;
    }
    calc.return = calc.temp;
}

Define single_read(string addr) (warp=true)
{
    If (addr > "0x0Dffffff")
    {
        read.single.return = CARTRAM[(addr - 0x0Dffffff)];
    }
    Else
    {
        If (addr > "0x07ffffff")
        {
            read.single.return = PAKROM[(addr - 0x07ffffff)];
        }
        Else
        {
            If (addr > "0x06ffffff")
            {
                read.single.return = OAM[(addr - 0x06ffffff)];
            }
            Else
            {
                If (addr > "0x05ffffff")
                {
                    read.single.return = VRAM[(addr - 0x05ffffff)];
                }
                Else
                {
                    If (addr > "0x04ffffff")
                    {
                        read.single.return = PALRAM[(addr - 0x04ffffff)];
                    }
                    Else
                    {
                        If (addr > "0x03ffffff")
                        {
                            read.single.return = IORAM[(addr - 0x03ffffff)];
                        }
                        Else
                        {
                            If (addr > "0x02ffffff")
                            {
                                read.single.return = IWRAM[(addr - 0x02ffffff)];
                            }
                            Else
                            {
                                read.single.return = EWRAM[(addr - 0x01ffffff)];
                            }
                        }
                    }
                }
            }
        }
    }
}

Define single_write(string addr)(string value) (warp=true)
{
    If (addr > "0x0Dffffff")
    {
        List.ReplaceItem(CARTRAM, (addr - 0x0Dffffff), value);
    }
    Else
    {
        If (addr > "0x06ffffff")
        {
            List.ReplaceItem(OAM, (addr - 0x06ffffff), value);
        }
        Else
        {
            If (addr > "0x05ffffff")
            {
                List.ReplaceItem(VRAM, (addr - 0x05ffffff), value);
            }
            Else
            {
                If (addr > "0x04ffffff")
                {
                    List.ReplaceItem(PALRAM, (addr - 0x04ffffff), value);
                }
                Else
                {
                    If (addr > "0x03ffffff")
                    {
                        List.ReplaceItem(IORAM, (addr - 0x03ffffff), value);
                    }
                    Else
                    {
                        If (addr > "0x02ffffff")
                        {
                            List.ReplaceItem(IWRAM, (addr - 0x02ffffff), value);
                        }
                        Else
                        {
                            List.ReplaceItem(IORAM, (addr - 0x01ffffff), value);
                        }
                    }
                }
            }
        }
    }
}

Define step (warp=true)
{
    List.ReplaceItem(_r, 16, (4 + _r[16]));
    If (program.done == 1)
    {
        Stop(this script);
    }
    flags.met = "false";
    Call (PAKROM[(_r[16] - 0x07fffffc)]) >>(4);
    If (calc.return > 7)
    {
        If (calc.return > 11)
        {
            If (calc.return > 13)
            {
                If (calc.return > 14)
                {
                }
                Else
                {
                    flags.met = 1;
                }
            }
            Else
            {
                If (calc.return > 12)
                {
                    flags.met = (flags.z + (Not ((flags.n == flags.v))));
                }
                Else
                {
                    flags.met = ((flags.n == flags.v) - flags.z);
                }
            }
        }
        Else
        {
            If (calc.return > 9)
            {
                If (calc.return > 10)
                {
                    flags.met = ( - (flags.n == flags.v));
                }
                Else
                {
                    flags.met = ( + (flags.n == flags.v));
                }
            }
            Else
            {
                If (calc.return > 8)
                {
                    flags.met = (flags.z - flags.c);
                }
                Else
                {
                    flags.met = (flags.c - flags.z);
                }
            }
        }
    }
    Else
    {
        If (calc.return > 3)
        {
            If (calc.return > 5)
            {
                If (calc.return > 6)
                {
                    flags.met = (1 - flags.v);
                }
                Else
                {
                    flags.met = flags.v;
                }
            }
            Else
            {
                If (calc.return > 4)
                {
                    flags.met = (1 - flags.n);
                }
                Else
                {
                    flags.met = flags.n;
                }
            }
        }
        Else
        {
            If (calc.return > 1)
            {
                If (calc.return > 2)
                {
                    flags.met = (1 - flags.c);
                }
                Else
                {
                    flags.met = flags.c;
                }
            }
            Else
            {
                If (calc.return > 0)
                {
                    flags.met = (1 - flags.z);
                }
                Else
                {
                    flags.met = flags.z;
                }
            }
        }
    }
    op.opcode = (((16777216 * PAKROM[(_r[16] - 0x07fffffc)]) + (65536 * PAKROM[(_r[16] - 0x07fffffd)])) + ((256 * PAKROM[(_r[16] - 0x07fffffe)]) + PAKROM[(_r[16] - 0x07ffffff)]));
    If (op.opcode == 0)
    {
        program.done = 1;
        Stop(this script);
    }
    If (flags.met > 0)
    {
        Call opcode(op.opcode);
    }
}

Define write(string addr)(string value)(string length) (warp=true)
{
    calc.return = 0;
    storage.byte = 0;
    Repeat (length)
    {
        Call (value) >>((8 * ((length - storage.byte) - 1)));
        Call single_write((addr + storage.byte))((calc.return % 256));
        storage.byte += 1;
    }
}


//----- Costumes ------------------------------------------------------------------------------------------------------

costume1.svg
