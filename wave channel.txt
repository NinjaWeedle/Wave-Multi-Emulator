//----- Variables -----------------------------------------------------------------------------------------------------

*OAMDMA# = 0
*OAMDMAS = 0
,c = 0
,joypad = 0
-keyRandom = 0
-LCDC = 0
-LCDS = 0
-LY = 0
-LYC = 0
-LYmask = 0
-scx = 0
-SCXMOD8 = 0
-STATUS = 0
-windowWasDrawn? = 0
-WLY = 0
-wx = 0
.DIV2 = 0
.DIVCYCLES = 0
.DMAenable = 0
.DMAend = 0
.DMAlength = 0
.DMAstart = 0
.DMAtype = 0
.GBC? = 0
.HDMAenable = 0
.IME = 0
.instr = 0
.instrID = 0
.Mpri = 0
.soundEnable = 0
.SPEED = 0
.Spri = 0
.spriteattributes = 0
.spriteCpal = 0
.spritesize = 0
.TAC1 = 0
.TAC2 = 0
.TACFLAG = 0
.tileB = 0
.timenable = 0
.vbank = 0
.windowflag = 0
@PAL = 0
@PIX = 0
fftlast = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 3 4 0 2 0 0 0 4 3 5 8 0 0 14 4 14 4 2 12 2 8 15 0 0 0 15 15 0 0 0 0
FPS = 0
g = 0
Game Boy: _HALT = 0
Game Boy: _PC = 0
Game Boy: _SP = 0
h = 0
i = 0
k = 0
l = 0
loop = 0
m = 0
render = 0
T1 = 0
T2 = 0
T3 = 0
T4 = 0
T4.1 = 0
T4.2 = 0
T5 = 0
T6 = 0
T7 = 0
T8 = 0
T9 = 0
T10 = 0
T11 = 0
target frames = 0
time1 = 0
time2 = 0
v = 0
x = 0
z = 0
_A = 0
_B = 0
_current bank = 0
_frames = 0
_frameskip = 0
_id = 0
_IEindex = 0
_IFindex = 0
_INTRdest = 0
_lineCyc = 0
_MBCnumber = 0
_pitch = -333.76316562296
_PIXEL# = 0
_R = 0
_RE = 0
_rom size = 0
_S = 0
_SIZE = 0
_STATcond1 = 0
_STATcond2 = 0
_T = 0
_X = 0
_XSHIFT = 0
_YSHIFT = 0
_Z = 0


//----- Lists ---------------------------------------------------------------------------------------------------------

$A = { }
$B = { }
$C = { }
*OAMidx = { }
*OAMx = { }
*OAMy = { }
*palette = { }
.addr2ptr = { }
.AND = { }
.OR = { }
.pointerStart = { }
.ptr = { }
.ptr index = { }
.vals = { }
.XOR = { }
2^x = { }
bin = { }
byteStack = { }
dat = { }
Flag bits = { }
_cartridge stuff = { }
_DMGPALETTE = { }
_GBCPALETTELOOKUP = { }
_instrIDs = { }
_instrParam = { }
_PALETTE RAM = { }
_pix = { }
_RAM = { }
_REGISTERS = { }
_ROM = { }
_soundregs = { }


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(create sound)
{
    Call instant;
    Event.Broadcast("soundsync");
    Event.Broadcast("m1");
}

WhenBroadcastReceived(m1)
{
    Forever
    {
        If (pitch == (-1 / 0))
        {
            If (Not ((Sound.Volume() == 0)))
            {
                Sound.SetVolumeTo(0);
            }
            Wait Until (pitch > (-1 / 0));
        }
        If (_id > q)
        {
            If (Sound.Volume() > 0)
            {
                Sound.SetVolumeTo(0);
            }
        }
        Else
        {
            If (Not ((Sound.Volume() == vol[_id])))
            {
                Sound.SetVolumeTo((vol[_id] * (20 / 100)));
            }
        }
    }
}

WhenBroadcastReceived(m1)
{
    Forever
    {
        If (pitch == (-1 / 0))
        {
        }
        Else
        {
            If (Not ((_pitch == pitch)))
            {
                _pitch = pitch;
                Sound.SetEffectTo(PITCH, pitch);
            }
        }
    }
}

WhenBroadcastReceived(m1)
{
    Sound.SetVolumeTo(0);
    Forever
    {
        If (Sound.Volume() == 0)
        {
            Wait Until (Sound.Volume() > 0);
        }
        Sound.PlayUntilDone(_id);
    }
}

WhenBroadcastReceived(prune)
{
    Control.DeleteThisClone();
}

WhenBroadcastReceived(soundsync)
{
    fftlast = 0;
    Forever
    {
        If (pitches[3] < 0)
        {
            pitch = "-Infinity";
        }
        Else
        {
            pitch = ((pitches[3] - 69) * 10);
        }
        If (Not ((wave == fftlast)))
        {
            Call put Input;
            Call FFT();
            Call apply to vol;
            fftlast = wave;
        }
    }
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define apply to vol (warp=true)
{
    r.0 = 1;
    List.DeleteAll(vol);
    Repeat (List.Length(FT.im))
    {
        r.0 += 1;
        r.1 = FT.re[r.0];
        r.2 = FT.im[r.0];
        List.Add(vol, (volume[3] * sqrt(((r.1 * r.1) + (r.2 * r.2)))));
    }
}

Define FFT(bool I) (warp=true)
{
    List.DeleteItem(temp.0, all);
    List.DeleteItem(temp.1, all);
    If (List.Length(FT.re) < List.Length(FT.im))
    {
        r.0 = List.Length(FT.im);
    }
    Else
    {
        r.0 = List.Length(FT.re);
    }
    r.0 += -1;
    r.2 = 1;
    r.3 = 0;
    Repeat Until (r.2 > r.0)
    {
        r.2 += r.2;
        r.3 += 1;
    }
    Repeat (r.2)
    {
        r.0 = List.Length(temp.0);
        r.1 = 0;
        Repeat (r.3)
        {
            r.1 = (r.1 * 2);
            r.1 += (r.0 % 2);
            r.0 = floor((r.0 / 2));
        }
        r.1 += 1;
        List.Add(temp.0, (FT.re[r.1] + 0));
        List.Add(temp.1, (FT.im[r.1] + 0));
    }
    r.1 = 1;
    Repeat (r.3)
    {
        r.0 = 1;
        r.2 = (r.2 / 2);
        Repeat (r.2)
        {
            r.8 = 0;
            If I
            {
                r.9 = (180 / r.1);
            }
            Else
            {
                r.9 = (-180 / r.1);
            }
            Repeat (r.1)
            {
                r.0 += r.1;
                r.4 = cos(r.8);
                r.5 = sin(r.8);
                r.3 = temp.0[r.0];
                r.7 = temp.1[r.0];
                r.6 = ((r.3 * r.4) - (r.7 * r.5));
                r.7 = ((r.3 * r.5) + (r.7 * r.4));
                r.0 += (0 - r.1);
                r.4 = temp.0[r.0];
                r.5 = temp.1[r.0];
                List.ReplaceItem(temp.0, r.0, (r.4 + r.6));
                List.ReplaceItem(temp.1, r.0, (r.5 + r.7));
                r.0 += r.1;
                List.ReplaceItem(temp.0, r.0, (r.4 - r.6));
                List.ReplaceItem(temp.1, r.0, (r.5 - r.7));
                r.0 += (1 - r.1);
                r.8 += r.9;
            }
            r.0 += r.1;
        }
        r.1 += r.1;
    }
    r.0 = 0;
    List.DeleteItem(FT.re, all);
    List.DeleteItem(FT.im, all);
    r.1 = sqrt(List.Length(temp.0));
    Repeat (List.Length(temp.0))
    {
        r.0 += 1;
        List.Add(FT.re, (temp.0[r.0] / r.1));
        List.Add(FT.im, (temp.1[r.0] / r.1));
    }
}

Define instant (warp=true)
{
    _pitch = 0;
    q = 16;
    If (Not ())
    {
        _id = q;
        Repeat (q)
        {
            Control.CreateCloneOf(_myself_);
            _id += -1;
        }
    }
    Else
    {
        _id = 96;
        Repeat (95)
        {
            Control.CreateCloneOf(_myself_);
            _id += -1;
        }
    }
}

Define put Input (warp=true)
{
    List.DeleteAll(FT.re);
    List.DeleteAll(FT.im);
    r.0 = 0;
    Repeat (32)
    {
        r.0 += 1;
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
    }
}


//----- Costumes ------------------------------------------------------------------------------------------------------

costume1.svg


//----- Sounds --------------------------------------------------------------------------------------------------------

vsine1.wav
vsine2.wav
vsine3.wav
vsine4.wav
vsine5.wav
vsine6.wav
vsine7.wav
vsine8.wav
vsine9.wav
vsine10.wav
vsine11.wav
vsine12.wav
vsine13.wav
vsine14.wav
vsine15.wav
vsine16.wav
