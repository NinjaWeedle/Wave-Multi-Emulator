//----- Variables -----------------------------------------------------------------------------------------------------

_id = 0
_pitch = 0



//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(create sound)
{
    Event.Broadcast("FFT");
}

WhenBroadcastReceived(FFT)
{
    Forever
    {
        Call put Input;
        Call FFT();
        Call apply to vol;
        pitch = ((pitches[3] - 69) * 10);
        If (pitches[3] < 0)
        {
            pitch = "-Infinity";
        }
    }
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define apply to vol (warp=true)
{
    r.0 = 1;
    List.DeleteAll(vol);
    Repeat (List.Length(FT.im))
    {
        r.0 += 1;
        r.1 = FT.re[r.0];
        r.2 = FT.im[r.0];
        List.Add(vol, ((volume[1] * (5 / 15)) * sqrt(((r.1 * r.1) + (r.2 * r.2)))));
    }
}

Define FFT(bool I) (warp=true)
{
    List.DeleteItem(temp.0, all);
    List.DeleteItem(temp.1, all);
    If (List.Length(FT.re) < List.Length(FT.im))
    {
        r.0 = List.Length(FT.im);
    }
    Else
    {
        r.0 = List.Length(FT.re);
    }
    r.0 += -1;
    r.2 = 1;
    r.3 = 0;
    Repeat Until (r.2 > r.0)
    {
        r.2 += r.2;
        r.3 += 1;
    }
    Repeat (r.2)
    {
        r.0 = List.Length(temp.0);
        r.1 = 0;
        Repeat (r.3)
        {
            r.1 = (r.1 * 2);
            r.1 += (r.0 % 2);
            r.0 = floor((r.0 / 2));
        }
        r.1 += 1;
        List.Add(temp.0, (FT.re[r.1] + 0));
        List.Add(temp.1, (FT.im[r.1] + 0));
    }
    r.1 = 1;
    Repeat (r.3)
    {
        r.0 = 1;
        r.2 = (r.2 / 2);
        Repeat (r.2)
        {
            r.8 = 0;
            If I
            {
                r.9 = (180 / r.1);
            }
            Else
            {
                r.9 = (-180 / r.1);
            }
            Repeat (r.1)
            {
                r.0 += r.1;
                r.4 = cos(r.8);
                r.5 = sin(r.8);
                r.3 = temp.0[r.0];
                r.7 = temp.1[r.0];
                r.6 = ((r.3 * r.4) - (r.7 * r.5));
                r.7 = ((r.3 * r.5) + (r.7 * r.4));
                r.0 += (0 - r.1);
                r.4 = temp.0[r.0];
                r.5 = temp.1[r.0];
                List.ReplaceItem(temp.0, r.0, (r.4 + r.6));
                List.ReplaceItem(temp.1, r.0, (r.5 + r.7));
                r.0 += r.1;
                List.ReplaceItem(temp.0, r.0, (r.4 - r.6));
                List.ReplaceItem(temp.1, r.0, (r.5 - r.7));
                r.0 += (1 - r.1);
                r.8 += r.9;
            }
            r.0 += r.1;
        }
        r.1 += r.1;
    }
    r.0 = 0;
    List.DeleteItem(FT.re, all);
    List.DeleteItem(FT.im, all);
    r.1 = sqrt(List.Length(temp.0));
    Repeat (List.Length(temp.0))
    {
        r.0 += 1;
        List.Add(FT.re, (temp.0[r.0] / r.1));
        List.Add(FT.im, (temp.1[r.0] / r.1));
    }
}

Define put Input (warp=true)
{
    List.DeleteAll(FT.re);
    List.DeleteAll(FT.im);
    r.0 = 0;
    Repeat (32)
    {
        r.0 += 1;
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.re, (wave[r.0] / 15));
        List.Add(FT.im, 0);
        List.Add(FT.im, 0);
        List.Add(FT.im, 0);
        List.Add(FT.im, 0);
        List.Add(FT.im, 0);
        List.Add(FT.im, 0);
        List.Add(FT.im, 0);
        List.Add(FT.im, 0);
    }
}


//----- Costumes ------------------------------------------------------------------------------------------------------

costume1.png
