//----- Variables -----------------------------------------------------------------------------------------------------

+channel Cycle = 0
+channel ID = 3
+is clone? = 0
i = 0
loop = 4
menu0exit = 0
return = 155.6236834377



//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(+audioEngineUpdateAll)
{
    If (+is clone? == 0)
    {
        Call check audio clones;
    }
    Else
    {
        If (+channel ID == 4)
        {
            Call convert pitch to MIDI note((524288 / +sound pitch[+channel ID]));
        }
        Else
        {
            Call convert pitch to MIDI note((131072 / (2048 - +sound pitch[+channel ID])));
        }
        Sound.SetEffectTo(PITCH, ((return - 69) * 10));
    }
}

WhenBroadcastReceived(+audioEngineUpdateAll)
{
    If (+is clone? == 0)
    {
    }
    Else
    {
        If (+sound duty cycle[+channel ID] == +channel Cycle)
        {
            Sound.SetVolumeTo(((+sound volume[+channel ID] * .5) * +globalVol.R));
        }
        Else
        {
            Sound.SetVolumeTo(0);
        }
    }
}

WhenBroadcastReceived(+turnoffaudio)
{
    Sound.SetVolumeTo(0);
}

WhenBroadcastReceived(exit emulator)
{
    +is clone? = 0;
    Control.DeleteThisClone();
}

WhenBroadcastReceived(reset emulator)
{
    +is clone? = 0;
    Control.DeleteThisClone();
}


//----- Start as clone ------------------------------------------------------------------------------------------------

Control.WhenIStartAsClone()
{
    Forever
    {
        If (+channel ID == 1)
        {
            Sound.PlayUntilDone(Operator.Join("P", Operator.Join(+channel Cycle, 0)));
        }
        If (+channel ID == 2)
        {
            Sound.PlayUntilDone(Operator.Join("P", Operator.Join(+channel Cycle, 1)));
        }
        If (+channel ID == 4)
        {
            Sound.PlayUntilDone(Operator.Join("N", Operator.Join(+channel Cycle, 0)));
        }
    }
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define check audio clones (warp=true)
{
    control_for_each ?? - probably legacy function from Scratch 2.0;
}

Define clone sound channel (warp=true)
{
    +is clone? = 1;
    Control.CreateCloneOf(_myself_);
    +is clone? = 0;
}

Define convert pitch to MIDI note(string p) (warp=true)
{
    return = ((12 * (ln((p / 440)) / ln(2))) + 69);
}

Define fast (warp=true)
{
    +channel Cycle = 0;
    Repeat (Operator.LetterOf(4402, loop))
    {
        Call clone sound channel;
        +channel Cycle += 1;
    }
}


//----- Costumes ------------------------------------------------------------------------------------------------------

costume1.svg


//----- Sounds --------------------------------------------------------------------------------------------------------

N00.wav
N10.wav
P00.wav
P01.wav
P10.wav
P11.wav
P20.wav
P21.wav
P30.wav
P31.wav
